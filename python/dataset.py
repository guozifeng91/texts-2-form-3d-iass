SELECTED_KEYWORDS=["simple","strong","light", "natural","architectural","unique","like","clear","potential","interesting","open","different","sustainable", "central","internal", "designed","structural","vertical","great", "large","high","modular", "living", "beautiful", "compelling","small", "flexible", "quality","spatial","low","rich","poetic","integrated","innovative","linear","curved","typical","adaptable","convincing","historic","effective","thoughtfull","complex","multiple","connected","iconic","stacked","single", "symbolic","transparent","organized","solid","enclosed","shaped","filled","impressive","refined","tectonic","ephemeral","affordable","supported","alternative","restrained","elegant","long","balanced","minimal","heavy"]

import importlib.util

# how to load module from filename:
# https://stackoverflow.com/questions/67631/how-to-import-a-module-given-the-full-path
def _import_from_file(py_file,name='imported_module'):
    '''
    import a module from .py filename specification
    '''
    spec = importlib.util.spec_from_file_location(name, py_file)
    foo = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(foo)
    return foo

def get_dataset_from_file(dataset_py, returns=None):
    '''    
    load a CEM form dataset from file
    
    ----- parameters -----
    dataset_py: a .py file that implements the io methods for the dataset
    returns: string, what method to return, if none is given or the method does not exist, the loaded module will be returned
    
    ----- returns -----
    maybe a callable f(i) that gives the i-th form of the dataset?
    
    ----- note -----
    because the actual implementation depends on the file concent / format generated by the CEM generator, i did not make any io implementation in this method and i left the io part to the dataset itself (the dataset_py file implements that will be returned by this method)
    
    nevertheless, a rough protocol is encouraged to follow, that the dataset should have three methods:
    get_num_samples() which returns the number of forms in the dataset
    get_feature_names() which returns all avaiable feature names of the dataset
    get_forms(i) which returns the i-th form of the dataset (as a dictionary)
    get_vector(i,x) which returns a 2d array based on row indice(s) i and column name(s) x 
    get_dataset_name() which returns the name of the dataset
    
    this method is a wrapper of loading modules from py file (https://stackoverflow.com/questions/67631/how-to-import-a-module-given-the-full-path)
    '''
    
    dataset =_import_from_file(dataset_py)
    
    try:
        m = getattr(dataset, returns)
        return m
    except:
        return dataset